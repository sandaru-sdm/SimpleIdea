/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.sdm.simpleidea.gui;

import com.sdm.simpleidea.model.MySQL;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.MessageFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperReport;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import java.io.IOException;
import net.sf.jasperreports.view.JasperViewer;
import java.nio.file.*;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 *
 * @author maduh
 */
public class Invoice extends javax.swing.JFrame {

    int number = 0;
    private static final Logger logger = Logger.getLogger(PaymentTypes.class.getName());
    DecimalFormat df = new DecimalFormat("0.00");

    /**
     * Creates new form Invoice
     */
    public Invoice() {
        initComponents();
        setLocationRelativeTo(null);

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                Home home = new Home();
                home.setVisible(true);
                dispose();
            }
        });

        loadPaymentTypes();
        loadServices();
        loadOtherDetails();
        setLoggerFile();
        setJobID();
        loadCustomers();
        setTableClicks();

        jTextField9.setEnabled(false);
        jTextField11.setEnabled(false);

        setIconImage(new ImageIcon(getClass().getResource("/com/sdm/simpleidea/resources/icon.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Invoice");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Invoice");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Customer Details"));
        jPanel2.setToolTipText("");

        jLabel2.setText("Customer Mobile");

        jLabel3.setText("Customer Name");

        jTextField2.setEditable(false);

        jTextField3.setEditable(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Service Details"));
        jPanel3.setToolTipText("");

        jLabel4.setText("Service Type");

        jLabel5.setText("Height");

        jTextField5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField5KeyTyped(evt);
            }
        });

        jLabel6.setText("Width");

        jTextField6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField6KeyTyped(evt);
            }
        });

        jTextField7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField7KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField7KeyTyped(evt);
            }
        });

        jLabel8.setText(" Rate");

        jLabel10.setText("Qty");

        jTextField9.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField9KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField9KeyTyped(evt);
            }
        });

        jLabel11.setText("Amount");

        jTextField10.setEditable(false);
        jTextField10.setText("0.00");

        jButton1.setText("Add to Invoice");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel14.setText("Other");

        jLabel15.setText("Job NO");

        jTextField13.setEditable(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextField13)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6)
                                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8)
                                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel10)
                                        .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel11)
                                        .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jButton1)))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)
                        .addGap(6, 6, 6)))
                .addContainerGap())
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Service Type", "Other", "Height", "Width", "Rate", "Qty", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Customer"));

        jLabel17.setText("Search Customer");

        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField4KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField4KeyTyped(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel18.setText("*Search by Mobile number or Name");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField4)
                .addGap(18, 18, 18)
                .addComponent(jLabel18)
                .addGap(222, 222, 222))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Name", "Mobile"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Payment Details"));
        jPanel4.setToolTipText("");

        jLabel7.setText("Payment Type");

        jLabel9.setText("Sub Total");

        jTextField8.setEditable(false);
        jTextField8.setText("0.00");

        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel12.setText("Payment");

        jTextField11.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField11KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField11KeyTyped(evt);
            }
        });

        jTextField12.setEditable(false);
        jTextField12.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jTextField12.setText("0.00");
        jTextField12.setFocusable(false);

        jLabel13.setText("Balance");

        jButton2.setText("Invoice");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel16.setText("*Double click selected item for remove it from table.");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                            .addComponent(jTextField11, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12)))))
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField12, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                            .addComponent(jLabel13))
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel16))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        addDataIntoInvoice();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField9KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField9KeyReleased
        // TODO add your handling code here:
        String height = jTextField5.getText().trim();
        String width = jTextField6.getText().trim();
        String rate = jTextField7.getText().trim();
        String qty = jTextField9.getText().trim();

        loadAmount(height, width, rate, qty);
    }//GEN-LAST:event_jTextField9KeyReleased

    private void jTextField7KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField7KeyReleased
        // TODO add your handling code here:
        String rate = jTextField7.getText().trim();

        if (!rate.equals("0") && !rate.isEmpty()) {
            jTextField9.setEnabled(true);
        } else {
            jTextField9.setEnabled(false);
        }
    }//GEN-LAST:event_jTextField7KeyReleased

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
        String paymentType = jComboBox2.getSelectedItem().toString();

        if (paymentType.equals("0")) {
            jTextField11.setEnabled(false);
        } else {
            jTextField11.setEnabled(true);
        }
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jTextField11KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField11KeyReleased
        // TODO add your handling code here:
        if (jTextField11.getText().isEmpty()) {
            jTextField12.setText("0.00");
            jTextField12.setForeground(Color.BLACK);
        } else {
            String total = jTextField8.getText();
            String payment = jTextField11.getText();

            double balance = Double.parseDouble(payment) - Double.parseDouble(total);

            if (balance < 0) {
                jTextField12.setForeground(Color.RED);
            } else {
                jTextField12.setForeground(Color.GREEN);
            }

            jTextField12.setText(df.format(balance));
        }
    }//GEN-LAST:event_jTextField11KeyReleased

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            int r = jTable1.getSelectedRow();

            if (r == -1) {
                JOptionPane.showMessageDialog(this, "Please Select a Invoice Item.", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                int option = JOptionPane.showConfirmDialog(this, "Do You Want to Remove this Item?", "Confirmation", JOptionPane.YES_NO_OPTION);

                if (option == JOptionPane.YES_OPTION) {
                    DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                    dtm.removeRow(r);

                    updateTotal();
                    resetFields();
                    JOptionPane.showMessageDialog(this, "Invoice item Removed.", "Success", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();

        if (dtm.getRowCount() > 0) {

            // The table has data
            if (jTextField11.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Payment is Empty.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                addToInvoice();
            }

        } else {
            // The table is empty
            JOptionPane.showMessageDialog(this, "Invoice Item table is Empty.", "Success", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField11KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField11KeyTyped
        // TODO add your handling code here:
        String price = jTextField11.getText();
        String text = price + evt.getKeyChar();

        if (!Pattern.compile("0|0[.]|0.[1-9]|0.[1-9][0-9]|[1-9][0-9]*[.]?[0-9]{0,2}").matcher(text).matches()) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextField11KeyTyped

    private void jTextField4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyReleased
        // TODO add your handling code here:
        String text = jTextField4.getText();

        if (text.isEmpty()) {
            loadCustomers();
        } else {
            loadCustomers(text);
        }
    }//GEN-LAST:event_jTextField4KeyReleased

    private void jTextField4KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyTyped
        // TODO add your handling code here:
        String t = jTextField3.getText();
        String text = t + evt.getKeyChar();

        if (!Pattern.compile("^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$").matcher(text).matches()) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextField4KeyTyped

    private void jTextField5KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField5KeyTyped
        // TODO add your handling code here:
        String price = jTextField5.getText();
        String text = price + evt.getKeyChar();

        if (!Pattern.compile("0|0[.]|0.[1-9]|0.[1-9][0-9]|[1-9][0-9]*[.]?[0-9]{0,2}").matcher(text).matches()) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextField5KeyTyped

    private void jTextField6KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField6KeyTyped
        // TODO add your handling code here:
        String price = jTextField6.getText();
        String text = price + evt.getKeyChar();

        if (!Pattern.compile("0|0[.]|0.[1-9]|0.[1-9][0-9]|[1-9][0-9]*[.]?[0-9]{0,2}").matcher(text).matches()) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextField6KeyTyped

    private void jTextField9KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField9KeyTyped
        // TODO add your handling code here:
        String price = jTextField9.getText();
        String text = price + evt.getKeyChar();

        if (!Pattern.compile("^[0-9]*\\.?[0-9]+$").matcher(text).matches() || !Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }

    }//GEN-LAST:event_jTextField9KeyTyped

    private void jTextField7KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField7KeyTyped
        // TODO add your handling code here:
        String price = jTextField7.getText();
        String text = price + evt.getKeyChar();

        if (!Pattern.compile("0|0[.]|0.[1-9]|0.[1-9][0-9]|[1-9][0-9]*[.]?[0-9]{0,2}").matcher(text).matches()) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextField7KeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Invoice().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables

    private void loadPaymentTypes() {
        try {
            // Retrieve active payment types
            ResultSet rs = MySQL.search("SELECT `id`, `name` FROM `payment_type` WHERE `status_id` = 1");

            // Clear existing items in the combo box
            jComboBox2.removeAllItems();

            // Populate the combo box with payment types
            jComboBox2.addItem("-Select-");
            while (rs.next()) {
                jComboBox2.addItem(rs.getString("name"));
            }

        } catch (Exception e) {
            logger.log(Level.SEVERE, "An unexpected exception occurred", e);
        }
    }

    private void loadServices() {
        try {
            // Retrieve active services
            ResultSet rs = MySQL.search("SELECT `id`, `name` FROM `service` WHERE `status_id` = 1");

            // Clear existing items in the combo box
            jComboBox1.removeAllItems();

            // Populate the combo box with payment types
            jComboBox1.addItem("-Select-");
            while (rs.next()) {
                jComboBox1.addItem(rs.getString("name"));
            }

        } catch (Exception e) {
            logger.log(Level.SEVERE, "An unexpected exception occurred", e);
        }
    }

    private void loadOtherDetails() {
        try {
            // Retrieve active other details
            ResultSet rs = MySQL.search("SELECT `id`, `name` FROM `other` WHERE `status_id` = 1");

            // Clear existing items in the combo box
            jComboBox3.removeAllItems();

            // Populate the combo box with payment types
            jComboBox3.addItem("-Select-");
            while (rs.next()) {
                jComboBox3.addItem(rs.getString("name"));
            }

        } catch (Exception e) {
            logger.log(Level.SEVERE, "An unexpected exception occurred", e);
        }
    }

    private void setLoggerFile() {
        try {
            // Use the user's home directory as the base path for logfiles
            String userHome = System.getProperty("user.home");
            File logFolder = new File(userHome, "SimpleIdea/logfiles");

            // Check if the "logfiles" folder exists, and create it if not
            if (!logFolder.exists()) {
                logFolder.mkdirs();  // mkdirs() will create parent directories if they don't exist
            }

            // Set up a FileHandler to write log messages to a file named "logfiles/invoice_log.txt"
            FileHandler fileHandler = new FileHandler(logFolder.getPath() + File.separator + "invoice_log.txt", true);
            fileHandler.setFormatter(new SimpleFormatter() {
                private final String format = "[%1$tF %1$tT] [%2$-7s] %3$s %n";

                @Override
                public synchronized String format(java.util.logging.LogRecord lr) {
                    Object[] params = lr.getParameters();
                    return String.format(format, new java.util.Date(lr.getMillis()), lr.getLevel(),
                            MessageFormat.format(lr.getMessage(), params));
                }
            });

            logger.addHandler(fileHandler);
        } catch (IOException | SecurityException e) {
            // If there is an issue setting up the FileHandler, log the exception to the console
            e.printStackTrace();
        }
    }

    private void setJobID() {
        // Disable the jTextField13
        jTextField13.setEnabled(false);

        // Get current date and time
        LocalDateTime currentDateTime = LocalDateTime.now();

        // Format the date and time
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMddHHmmss");
        String formattedDateTime = currentDateTime.format(formatter);

        // Set the formatted date and time as JobId
        jTextField13.setText(formattedDateTime);
    }

    private void loadAmount(String height, String width, String rate, String qty) {
        double heightValue = 0.0;
        double widthValue = 0.0;
        double rateValue = 0.0;

        // Parse height and width only if they are not empty
        if (!height.isEmpty()) {
            try {
                heightValue = Double.parseDouble(height);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid numeric input for height", "Error", JOptionPane.ERROR_MESSAGE);
                return; // Exit the method if conversion fails
            }
        }

        if (!width.isEmpty()) {
            try {
                widthValue = Double.parseDouble(width);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid numeric input for width", "Error", JOptionPane.ERROR_MESSAGE);
                return; // Exit the method if conversion fails
            }
        }

        // Parse rate and qty
        try {
            rateValue = Double.parseDouble(rate);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid numeric input for rate", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit the method if conversion fails
        }

        double qtyValue = qty.isEmpty() ? 0.0 : Double.parseDouble(qty);

        // Calculate amount based on conditions
        double calculatedAmount;
        if (heightValue != 0.0 && widthValue != 0.0) {
            calculatedAmount = heightValue * widthValue * rateValue * qtyValue;
        } else {
            calculatedAmount = rateValue * qtyValue;
        }

        // Set the calculated amount in the jTextField10 (amount)
        jTextField10.setText(String.format("%.2f", calculatedAmount)); // Format to two decimal places
    }

    private void resetFields() {

        jComboBox1.setSelectedIndex(0);
        jComboBox3.setSelectedIndex(0);
        jTextField5.setText("");
        jTextField6.setText("");
        jTextField7.setText("");
        jTextField9.setText("");
        jTextField10.setText("0.00");
        jTextField9.setEnabled(false);
        jComboBox2.setSelectedIndex(0);
        jTextField11.setEnabled(false);
        jTextField11.setText("");
        jTextField12.setText("");

    }

    private void updateTotal() {
        double total = 0;

        for (int i = 0; i < jTable1.getRowCount(); i++) {
            String t = jTable1.getValueAt(i, 7).toString();
            total = total + Double.parseDouble(t);
        }

        jTextField8.setText(df.format(total));
    }

    private void addDataIntoInvoice() {
        String mobile = jTextField2.getText().trim();
        String customer = jTextField3.getText().trim();
        String jobNo = jTextField13.getText().trim();
        String serviceType = jComboBox1.getSelectedItem().toString();
        String other = jComboBox3.getSelectedItem().toString();
        String height = jTextField5.getText().trim();
        String width = jTextField6.getText().trim();
        String rate = jTextField7.getText().trim();
        String qty = jTextField9.getText().trim();
        String amount = jTextField10.getText().trim();

        if (mobile.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please Enter Customer Mobile Nnumber", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (customer.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please Enter Customer Name", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (serviceType.equals("-Select-")) {
            JOptionPane.showMessageDialog(this, "Please Select Service Type", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (rate.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please Enter Rate", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (other.equals("-Select-")) {
            JOptionPane.showMessageDialog(this, "Please Select Service Type", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (qty.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please Enter Qty", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            double heightValue = 0.0;
            double widthValue = 0.0;
            double rateValue = 0.0;

            try {
                if (!height.isEmpty()) {
                    heightValue = Double.parseDouble(height);
                }
                if (!width.isEmpty()) {
                    widthValue = Double.parseDouble(width);
                }
                rateValue = Double.parseDouble(rate);
            } catch (NumberFormatException e) {
                if (!height.isEmpty() || !width.isEmpty() || !rate.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Invalid numeric input for height, width, or rate", "Error", JOptionPane.ERROR_MESSAGE);
                    return; // Exit the method if conversion fails
                }
            }

            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();

            boolean isFound = false;
            int x = -1;
            for (int i = 0; i < dtm.getRowCount(); i++) {
                String serviceTypeTable = jTable1.getValueAt(i, 1).toString();
                String otherTable = jTable1.getValueAt(i, 2).toString();
                String heightTable = jTable1.getValueAt(i, 3).toString().replaceAll("\\.0", ""); // Remove decimal points
                String widthTable = jTable1.getValueAt(i, 4).toString().replaceAll("\\.0", ""); // Remove decimal points
                String rateTable = jTable1.getValueAt(i, 5).toString().replaceAll("\\.0", ""); // Remove decimal points

                if (serviceType.equals(serviceTypeTable) && other.equals(otherTable) && height.equals(heightTable) && width.equals(widthTable) && rate.equals(rateTable)) {
                    isFound = true;
                    x = i;
                    break;
                }
            }

            if (isFound) {
                int option = JOptionPane.showConfirmDialog(this, "This product already added. Do you want to update?", "Confirmation",
                        JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

                if (option == JOptionPane.YES_OPTION) {
                    int oldQty = Integer.parseInt(jTable1.getValueAt(x, 6).toString());
                    int finalQty = oldQty + Integer.parseInt(qty);

                    jTable1.setValueAt(String.valueOf(finalQty), x, 6);

                    double updatedItemTotal = finalQty * Double.parseDouble(amount);
                    jTable1.setValueAt(String.valueOf(updatedItemTotal), x, 7);

                    updateTotal();

                    resetFields();
                    JOptionPane.showMessageDialog(this, "Product updated in the invoice successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                Vector v = new Vector();

                number += 1;
                v.add(number);
                v.add(serviceType);
                v.add(other);

                if (!height.isEmpty()) {
                    v.add(heightValue);
                } else {
                    v.add("");
                }
                if (!width.isEmpty()) {
                    v.add(widthValue);
                } else {
                    v.add("");
                }

                v.add(rateValue);
                v.add(qty);
                v.add(amount);

                dtm.addRow(v);
                updateTotal();

                resetFields();

                JOptionPane.showMessageDialog(this, "Product added to the invoice successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            }

        }
    }

    private void addToInvoice() {
        String customerMobile = jTextField2.getText().trim();
        String paymentType = jComboBox2.getSelectedItem().toString();
        String balance = jTextField12.getText().trim();
        String payment = jTextField11.getText().trim();
        
        System.out.println(customerMobile);

        SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String dNow = sdf2.format(new Date());

        String jobNo = jTextField13.getText().trim();

        try {
            ResultSet rsCustomer = MySQL.search("SELECT * FROM `customer` WHERE `mobile` = '" + customerMobile + "'");
            if (rsCustomer.next()) {
                String customerId = rsCustomer.getString("id");

                MySQL.iud("INSERT INTO `invoice` (`invoice_id`, `date_time`, `customer_id`) VALUES ('" + jobNo + "', '" + dNow + "', '" + customerId + "')");

                ResultSet rsInvoice = MySQL.search("SELECT * FROM `invoice` WHERE `invoice_id`='" + jobNo + "'");
                rsInvoice.next();
                String invoiceTableId = rsInvoice.getString("id");

                ResultSet rsPaymentType = MySQL.search("SELECT * FROM `payment_type` WHERE `name`='" + paymentType + "'");
                rsPaymentType.next();
                String paymentTypeId = rsPaymentType.getString("id");

                MySQL.iud("INSERT INTO `invoice_payment` (`invoice_id`,`payment_type_id`,`payment`,`balance`) VALUES ('" + invoiceTableId + "','" + paymentTypeId + "','" + payment + "','" + balance + "')");

                for (int i = 0; i < jTable1.getRowCount(); i++) {

                    String serviceType = jTable1.getValueAt(i, 1).toString();
                    String other = jTable1.getValueAt(i, 2).toString();
                    String height = jTable1.getValueAt(i, 3).toString();
                    String width = jTable1.getValueAt(i, 4).toString();
                    String rate = jTable1.getValueAt(i, 5).toString();
                    String qty = jTable1.getValueAt(i, 6).toString();

                    ResultSet rsServicetype = MySQL.search("SELECT * FROM `service` WHERE `name`='" + serviceType + "'");
                    rsServicetype.next();
                    String serviceTypeId = rsServicetype.getString("id");

                    ResultSet rsOther = MySQL.search("SELECT * FROM `other` WHERE `name`='" + other + "'");
                    rsOther.next();
                    String otherId = rsOther.getString("id");

                    if ((height.isEmpty() && width.isEmpty()) || (height.isEmpty() && width.equals("0")) || height.equals("0") && width.isEmpty()) {
                        MySQL.iud("INSERT INTO `invoice_item` (`invoice_id`, `service_id`, `other_id`, `qty`, `height`, `width`, `rate`) VALUES('" + invoiceTableId + "','" + serviceTypeId + "','" + otherId + "', '" + qty + "', '0', '0', '" + rate + "')");

                    } else {
                        MySQL.iud("INSERT INTO `invoice_item` (`invoice_id`, `service_id`, `other_id`, `qty`, `height`, `width`, `rate`) VALUES('" + invoiceTableId + "','" + serviceTypeId + "','" + otherId + "', '" + qty + "', '" + height + "', '" + width + "', '" + rate + "')");
                    }

                }
                generateInvoice(jobNo);

                JOptionPane.showMessageDialog(this, "New Invoice Created.", "Success", JOptionPane.INFORMATION_MESSAGE);
                resetFields();
                DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                dtm.setRowCount(0);
                setJobID();
                jTextField8.setText("");
                jTextField2.setText("");
                jTextField3.setText("");
            }
        } catch (Exception e) {
            logger.log(Level.SEVERE, "An unexpected exception occurred", e);
        }
    }

    private void generateInvoice(String jobNo) {
        ResultSet rs = null;
        Connection dataSource = null;
        try {
            InputStream filePath = getClass().getResourceAsStream("/com/sdm/simpleidea/reports/InvoiceNew.jrxml");

            JasperReport jr = JasperCompileManager.compileReport(filePath);

            rs = MySQL.search("SELECT `invoice`.`date_time` AS `date`,`invoice_payment`.`payment` AS `total`, "
                    + "`invoice_payment`.`balance` AS `balance`, `customer`.`name` AS `customer`, `customer`.`mobile` AS `mobile`, "
                    + "`invoice`.`invoice_id` AS `invoiceId`, `service`.`name` AS `service`, `other`.`name` AS `other`,"
                    + "`invoice_item`.`height` AS `height`, `invoice_item`.`width` AS `width`, `invoice_item`.`rate` AS `rate`, `invoice_item`.`qty` AS `qty` "
                    + "FROM `invoice` INNER JOIN `invoice_payment` ON `invoice`.`id` = `invoice_payment`.`invoice_id` INNER JOIN `invoice_item` "
                    + "ON `invoice`.`id` = `invoice_item`.`invoice_id` INNER JOIN `service` ON `invoice_item`.`service_id` = `service`.`id` "
                    + "INNER JOIN `customer` ON `invoice`.`customer_id` = `customer`.`id` INNER JOIN `other` "
                    + "ON `invoice_item`.`other_id` = `other`.`id`  "
                    + "WHERE `invoice`.`invoice_id` = '" + jobNo + "'");

            rs.next();

            String date = rs.getString("date");
            String name = rs.getString("customer");
            String mobile = rs.getString("mobile");
            String total = jTextField8.getText().trim();
            String balance = jTextField12.getText().trim();
            String payment = jTextField11.getText().trim();

            HashMap parameters = new HashMap();

            parameters.put("invoice", jobNo);
            parameters.put("date", date);
            parameters.put("name", name);
            parameters.put("mobile", mobile);
            parameters.put("total", total);
            parameters.put("balance", balance);
            parameters.put("payment", payment);

            // Create a connection to the database
            dataSource = MySQL.getConnection();

            JasperPrint jp = JasperFillManager.fillReport(jr, parameters, dataSource);

            saveReportAsPDF(jp, jobNo, name);
            JasperViewer.viewReport(jp, false);

        } catch (JRException | SQLException e) {
            logger.log(Level.SEVERE, "Exception while creating variables.txt", e);
        } catch (Exception ex) {
            Logger.getLogger(Invoice.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void saveReportAsPDF(JasperPrint jp, String jobNo, String customer) {
        try {
            // Base directory where the PDFs will be saved
            String userHome = System.getProperty("user.home");
            String baseDirectory = userHome + File.separator + "SimpleIdea" + File.separator + "Invoices";

            // Create the base directory if it doesn't exist
            Files.createDirectories(Paths.get(baseDirectory));

            // Get the current date
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String currentDate = dateFormat.format(new Date());

            // Create the subdirectory for the current date if it doesn't exist
            String dateDirectory = baseDirectory + File.separator + currentDate;
            Files.createDirectories(Paths.get(dateDirectory));

            // Provide the path where you want to save the PDF
            String pdfFilePath = dateDirectory + File.separator + jobNo + "-" + customer + "_invoice.pdf";

            // Export the report to PDF
            JasperExportManager.exportReportToPdfFile(jp, pdfFilePath);

            System.out.println("PDF saved successfully: " + pdfFilePath);

        } catch (JRException | IOException e) {
            logger.log(Level.SEVERE, "Exception while saving PDF", e);
        }
    }

    private void loadCustomers() {
        try {
            ResultSet rs = MySQL.search("SELECT `customer`.`id`,`customer`.`name`, `customer`.`mobile`, `status`.`name` AS `status` FROM `customer` INNER JOIN `status` ON `customer`.`status_id` = `status`.`id` ORDER BY `customer`.`id` ASC ");

            DefaultTableModel dtm = (DefaultTableModel) jTable2.getModel();
            dtm.setRowCount(0);

            while (rs.next()) {

                Vector v = new Vector();
                v.add(rs.getString("id"));
                v.add(rs.getString("name"));
                v.add(rs.getString("mobile"));
                v.add(rs.getString("status"));

                dtm.addRow(v);

            }

            jTable2.setModel(dtm);

        } catch (Exception ex) {
            logger.log(Level.SEVERE, "An unexpected exception occurred", ex);
        }
    }

    private void loadCustomers(String text) {
        try {
            ResultSet rs = MySQL.search("SELECT `customer`.`id`,`customer`.`name`, `customer`.`mobile`, `status`.`name` AS `status` FROM `customer` INNER JOIN `status` ON `customer`.`status_id` = `status`.`id` WHERE `customer`.`name` LIKE '" + text + "%' OR `customer`.`mobile` LIKE '" + text + "%' ORDER BY `customer`.`id` ASC");

            DefaultTableModel dtm = (DefaultTableModel) jTable2.getModel();
            dtm.setRowCount(0);

            while (rs.next()) {

                Vector v = new Vector();
                v.add(rs.getString("id"));
                v.add(rs.getString("name"));
                v.add(rs.getString("mobile"));
                v.add(rs.getString("status"));

                dtm.addRow(v);

            }

            jTable2.setModel(dtm);

        } catch (Exception ex) {
            logger.log(Level.SEVERE, "An unexpected exception occurred", ex);
        }
    }

    private void setTableClicks() {
        // Add a listener for jTable1 selection
        jTable2.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                handleTableSelection();
            }
        });
    }

    private void handleTableSelection() {
        int selectedRowIndex = jTable2.getSelectedRow();

        if (selectedRowIndex != -1) {

            // Get the selected row's data and set it into the textfield
            jTextField3.setText((String) jTable2.getValueAt(selectedRowIndex, 1));
            jTextField2.setText((String) jTable2.getValueAt(selectedRowIndex, 2));

        }
    }
}
