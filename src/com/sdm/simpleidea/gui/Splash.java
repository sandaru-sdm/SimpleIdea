/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.sdm.simpleidea.gui;

import com.formdev.flatlaf.IntelliJTheme;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.ImageIcon;
import java.nio.file.*;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 *
 * @author maduh
 */
public class Splash extends javax.swing.JFrame {

    private static final Logger logger = Logger.getLogger(PaymentTypes.class.getName());

    /**
     * Creates new form Splash
     */
    public Splash() {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);

        setIconImage(new ImageIcon(getClass().getResource("/com/sdm/simpleidea/resources/icon.png")).getImage());

        setLoggerFile();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sdm/simpleidea/resources/logo.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        setTheme();
        setVariableFile();
        setSplash();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration//GEN-END:variables

    private void setLoggerFile() {
        try {
            // Use the user's home directory as the base path for logfiles
            String userHome = System.getProperty("user.home");
            File logFolder = new File(userHome, "SimpleIdea/logfiles");

            // Check if the "logfiles" folder exists, and create it if not
            if (!logFolder.exists()) {
                logFolder.mkdirs();  // mkdirs() will create parent directories if they don't exist
            }

            // Set up a FileHandler to write log messages to a file named "logfiles/invoice_log.txt"
            FileHandler fileHandler = new FileHandler(logFolder.getPath() + File.separator + "splash_log.txt", true);
            fileHandler.setFormatter(new SimpleFormatter() {
                private final String format = "[%1$tF %1$tT] [%2$-7s] %3$s %n";

                @Override
                public synchronized String format(java.util.logging.LogRecord lr) {
                    Object[] params = lr.getParameters();
                    return String.format(format, new java.util.Date(lr.getMillis()), lr.getLevel(),
                            MessageFormat.format(lr.getMessage(), params));
                }
            });

            logger.addHandler(fileHandler);
        } catch (IOException | SecurityException e) {
            // If there is an issue setting up the FileHandler, log the exception to the console
            e.printStackTrace();
        }
    }

    private static void setTheme() {
        try {
            InputStream is = Splash.class.getResourceAsStream("/com/sdm/simpleidea/resources/arc-theme-orange.theme.json");
            IntelliJTheme.setup(is);
        } catch (Exception e) {
            logger.log(Level.SEVERE, "Exception during theme setup", e);
        }
    }

    private static void setVariableFile() {
    try {
        // Use the user's home directory as the base path for SimpleIdea
        String baseDirectory = System.getProperty("user.home") + File.separator + "SimpleIdea";

        // Create the base directory if it doesn't exist
        Files.createDirectories(Paths.get(baseDirectory));

        File variablesFile = new File(baseDirectory, "variables.txt");
        
        if (!variablesFile.exists()) {
            try {
                variablesFile.createNewFile();

                // Add content to the file
                try (FileWriter writer = new FileWriter(variablesFile)) {
                    writer.write("DATABASE=\n");
                    writer.write("USERNAME=root\n");
                    writer.write("PASSWORD=\n");
                    writer.write("PORT=\n");
                }
            } catch (IOException e) {
                logger.log(Level.SEVERE, "Exception while creating variables.txt", e);
            }
        }
    } catch (IOException e) {
        logger.log(Level.SEVERE, "Exception while creating directories", e);
    }
}


    private static void setSplash() {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            // Log the date and time when the splash screen is opened
            logger.log(Level.INFO, "Splash screen opened on {0}", new java.util.Date());

            Splash s = new Splash();
            s.setVisible(true);

            Thread t = new Thread(() -> {
                for (int i = 0; i <= 100; i++) {
                    s.jProgressBar1.setValue(i);
                    try {
                        Thread.sleep(10);
                    } catch (Exception e) {
                        logger.log(Level.SEVERE, "Exception in progress bar thread", e);
                    }
                }
                Home home = new Home();
                home.setVisible(true);
                s.dispose();
            });
            t.start();
        });
    }

}
