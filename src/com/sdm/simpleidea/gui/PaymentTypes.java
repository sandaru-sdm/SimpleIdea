/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.sdm.simpleidea.gui;

import com.sdm.simpleidea.model.MySQL;
import java.awt.HeadlessException;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.ResultSet;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import java.sql.SQLException;
import java.io.File;
import java.io.IOException;
import java.text.MessageFormat;
import javax.swing.ImageIcon;

/**
 *
 * @author maduh
 */
public class PaymentTypes extends javax.swing.JFrame {

    private static final Logger logger = Logger.getLogger(PaymentTypes.class.getName());

    /**
     * Creates new form PaymentTypes
     */
    public PaymentTypes() {
        initComponents();
        setLocationRelativeTo(null);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                Home home = new Home();
                home.setVisible(true);
                dispose();
            }
        });

        loadPaymentTypes();
        jButton2.setEnabled(false);
        setButtonClicks();
        setLoggerFile();
        
        setIconImage(new ImageIcon(getClass().getResource("/com/sdm/simpleidea/resources/icon.png")).getImage());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Payment Types");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Payment Types");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Add New Payment Type"));

        jLabel3.setText("Payment Type");

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Update");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Payment Type", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel8.setText("* Double click Table row for change Status");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel9.setText("* Select Table Row for Update");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        String paymentType = jTextField1.getText().trim();

        if (paymentType.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please Enter Payment Type", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            try {
                ResultSet rs1 = MySQL.search("SELECT * FROM `payment_type` WHERE `name` = '" + paymentType + "'");

                if (rs1.next()) {
                    JOptionPane.showMessageDialog(this, "Payment Type Already Available!", "Warning", JOptionPane.WARNING_MESSAGE);
                } else {
                    MySQL.iud("INSERT INTO `payment_type` (`name`, `status_id`) VALUES ('" + paymentType + "', 1)");

                    // Log the added payment type
                    logger.log(Level.INFO, "New payment type added: {0}", paymentType);
                    clearFields();
                }
            } catch (SQLException ex) {
                logger.log(Level.SEVERE, "SQL Exception occurred", ex);
            } catch (HeadlessException | NumberFormatException ex) {
                handleGUIException(ex);
            } catch (Exception ex) {
                logger.log(Level.SEVERE, "An unexpected exception occurred", ex);
            }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String paymentType = jTextField1.getText().trim();

        if (paymentType.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please Enter Payment Type", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            try {
                // Get the selected row's ID
                int selectedRowId = Integer.parseInt((String) jTable1.getValueAt(jTable1.getSelectedRow(), 0));

                // Get the current payment type name before updating
                String currentName = (String) jTable1.getValueAt(jTable1.getSelectedRow(), 1);

                // Update the payment type in the database
                MySQL.iud("UPDATE `payment_type` SET `name` = '" + paymentType + "' WHERE `id` = " + selectedRowId);

                // Log the updated payment type
                logger.log(Level.INFO, "Payment type updated: ID={0}, Old Name={1}, New Name={2}",
                        new Object[]{selectedRowId, currentName, paymentType});

                // Clear fields and update button states
                clearFields();
                jButton1.setEnabled(true);
                jButton2.setEnabled(false);

            } catch (Exception ex) {
                logger.log(Level.SEVERE, "An unexpected exception occurred", ex);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PaymentTypes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PaymentTypes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PaymentTypes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PaymentTypes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PaymentTypes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void loadPaymentTypes() {
        try {
            ResultSet rs = MySQL.search("SELECT `payment_type`.`id`,`payment_type`.`name`, `status`.`name` AS `status` FROM `payment_type` INNER JOIN `status` ON `payment_type`.`status_id` = `status`.`id` ORDER BY `payment_type`.`id` ASC ");

            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(0);

            while (rs.next()) {

                Vector v = new Vector();
                v.add(rs.getString("id"));
                v.add(rs.getString("name"));
                v.add(rs.getString("status"));

                dtm.addRow(v);

            }

            jTable1.setModel(dtm);

        } catch (Exception ex) {
            logger.log(Level.SEVERE, "An unexpected exception occurred", ex);
        }
    }

    private void clearFields() {
        jTextField1.setText("");
        loadPaymentTypes();
    }

    private void handleTableSelection() {
        int selectedRowIndex = jTable1.getSelectedRow();

        if (selectedRowIndex != -1) {
            // Row is selected, enable Update button and disable Add button
            jButton1.setEnabled(false);
            jButton2.setEnabled(true);

            // Get the selected row's data and set it into the textfield
            jTextField1.setText((String) jTable1.getValueAt(selectedRowIndex, 1));

        } else {
            // No row selected, enable Add button and disable Update button
            jButton1.setEnabled(true);
            jButton2.setEnabled(false);

            // Clear the textfield
            jTextField1.setText("");
        }
    }

    private void handleTableDoubleClick() {
        int selectedRowIndex = jTable1.getSelectedRow();

        if (selectedRowIndex != -1) {
            // Get the selected row's ID and status
            int selectedRowId = Integer.parseInt((String) jTable1.getValueAt(selectedRowIndex, 0));
            String status = (String) jTable1.getValueAt(selectedRowIndex, 2);

            // Toggle the status between Active and Inactive
            int newStatusId = (status.equals("Active")) ? 2 : 1;

            try {
                // Get the current status before updating
                String currentStatus = (status.equals("Active")) ? "Active" : "Inactive";

                // Update the status in the database
                MySQL.iud("UPDATE `payment_type` SET `status_id` = " + newStatusId + " WHERE `id` = " + selectedRowId);

                // Log the status change
                logger.log(Level.INFO, "Payment type status changed: ID={0}, Old Status={1}, New Status={2}",
                        new Object[]{selectedRowId, currentStatus, (newStatusId == 1) ? "Active" : "Inactive"});

                // Reload the payment types to update the table
                loadPaymentTypes();

            } catch (Exception ex) {
                logger.log(Level.SEVERE, "An unexpected exception occurred", ex);
            }
        }
    }

    private void handleGUIException(Exception ex) {
        // Handle GUI-related exceptions
        logger.log(Level.SEVERE, "A GUI-related exception occurred", ex);
        JOptionPane.showMessageDialog(this, "An unexpected GUI-related exception occurred", "Error", JOptionPane.ERROR_MESSAGE);
    }

    private void windowClosing(WindowEvent e) {
        // Window closing event exception handling
        try {
            Home home = new Home();
            home.setVisible(true);
            dispose();
        } catch (Exception ex) {
            logger.log(Level.SEVERE, "An unexpected exception occurred during window closing", ex);
        }
    }

    private void setButtonClicks() {
// Add a listener for jTable1 selection
        jTable1.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                handleTableSelection();
            }
        });

        // Add a mouse listener to jTable1 for detecting double clicks
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2) {
                    handleTableDoubleClick();
                }
            }
        });
    }

    private void setLoggerFile() {
    try {
        // Use the user's home directory as the base path for logfiles
        String userHome = System.getProperty("user.home");
        File logFolder = new File(userHome, "SimpleIdea/logfiles");

        // Check if the "logfiles" folder exists, and create it if not
        if (!logFolder.exists()) {
            logFolder.mkdirs();  // mkdirs() will create parent directories if they don't exist
        }

        FileHandler fileHandler = new FileHandler(logFolder.getPath() + File.separator + "paymentType_log.txt", true);
        fileHandler.setFormatter(new SimpleFormatter() {
            private final String format = "[%1$tF %1$tT] [%2$-7s] %3$s %n";

            @Override
            public synchronized String format(java.util.logging.LogRecord lr) {
                Object[] params = lr.getParameters();
                return String.format(format, new java.util.Date(lr.getMillis()), lr.getLevel(),
                        MessageFormat.format(lr.getMessage(), params));
            }
        });

        logger.addHandler(fileHandler);
    } catch (IOException | SecurityException e) {
        // If there is an issue setting up the FileHandler, log the exception to the console
        e.printStackTrace();
    }
}
}
